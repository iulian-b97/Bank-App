// <auto-generated />
using System;
using Library.BankServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library.Migrations
{
    [DbContext(typeof(BankContext))]
    [Migration("20210803172610_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Library.BankServer.Entities.AccountType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Commission")
                        .HasColumnType("int");

                    b.Property<string>("OfferType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Bank", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CountrolDigits")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Library.BankServer.Entities.BankAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PIN")
                        .HasColumnType("int");

                    b.Property<float>("Sold")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("Library.BankServer.Entities.BankTransferIBAN", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankingOperatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("BankId");

                    b.HasIndex("BankingOperatorId");

                    b.ToTable("BankTransferIBANs");
                });

            modelBuilder.Entity("Library.BankServer.Entities.BankingOperator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CNP")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("BankingOperators");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CNP")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Deposit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepositId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("TransactionType")
                        .HasColumnType("bit");

                    b.Property<string>("WithdrawalId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("DepositId");

                    b.HasIndex("WithdrawalId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Withdrawal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Sum")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Withdrawals");
                });

            modelBuilder.Entity("Library.BankServer.Entities.BankAccount", b =>
                {
                    b.HasOne("Library.BankServer.Entities.AccountType", "AccountType")
                        .WithMany("BankAccounts")
                        .HasForeignKey("AccountTypeId");

                    b.HasOne("Library.BankServer.Entities.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId");

                    b.HasOne("Library.BankServer.Entities.Client", "Client")
                        .WithMany("BankAccounts")
                        .HasForeignKey("ClientId");

                    b.Navigation("AccountType");

                    b.Navigation("Bank");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Library.BankServer.Entities.BankTransferIBAN", b =>
                {
                    b.HasOne("Library.BankServer.Entities.BankAccount", "BankAccount")
                        .WithMany("BankTransferIBANs")
                        .HasForeignKey("BankAccountId");

                    b.HasOne("Library.BankServer.Entities.Bank", "Bank")
                        .WithMany("BankTransferIBANs")
                        .HasForeignKey("BankId");

                    b.HasOne("Library.BankServer.Entities.BankingOperator", "BankingOperator")
                        .WithMany("BankTransferIBANs")
                        .HasForeignKey("BankingOperatorId");

                    b.Navigation("Bank");

                    b.Navigation("BankAccount");

                    b.Navigation("BankingOperator");
                });

            modelBuilder.Entity("Library.BankServer.Entities.BankingOperator", b =>
                {
                    b.HasOne("Library.BankServer.Entities.Bank", "Bank")
                        .WithMany("BankingOperators")
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Client", b =>
                {
                    b.HasOne("Library.BankServer.Entities.Bank", "Bank")
                        .WithMany("Clients")
                        .HasForeignKey("BankId");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Transaction", b =>
                {
                    b.HasOne("Library.BankServer.Entities.BankAccount", "BankAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("BankAccountId");

                    b.HasOne("Library.BankServer.Entities.Deposit", "Deposit")
                        .WithMany("Transactions")
                        .HasForeignKey("DepositId");

                    b.HasOne("Library.BankServer.Entities.Withdrawal", "Withdrawal")
                        .WithMany("Transactions")
                        .HasForeignKey("WithdrawalId");

                    b.Navigation("BankAccount");

                    b.Navigation("Deposit");

                    b.Navigation("Withdrawal");
                });

            modelBuilder.Entity("Library.BankServer.Entities.AccountType", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Bank", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("BankingOperators");

                    b.Navigation("BankTransferIBANs");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Library.BankServer.Entities.BankAccount", b =>
                {
                    b.Navigation("BankTransferIBANs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Library.BankServer.Entities.BankingOperator", b =>
                {
                    b.Navigation("BankTransferIBANs");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Client", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Deposit", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Library.BankServer.Entities.Withdrawal", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
